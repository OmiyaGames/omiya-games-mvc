{
  "api/OmiyaGames.MVC.Controller.Action.html": {
    "href": "api/OmiyaGames.MVC.Controller.Action.html",
    "title": "Delegate Controller.Action | Model-View-Controller documentation",
    "keywords": "Delegate Controller.Action A definition for delegates in a Model . Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public delegate void Action(object source); Parameters Type Name Description Object source The caller of this event."
  },
  "api/OmiyaGames.MVC.Controller.Action-1.html": {
    "href": "api/OmiyaGames.MVC.Controller.Action-1.html",
    "title": "Delegate Controller.Action<T> | Model-View-Controller documentation",
    "keywords": "Delegate Controller.Action<T> A definition for delegates in a Model . Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public delegate void Action<in T>(object source, T arg); Parameters Type Name Description Object source The caller of this event. T arg Supplied event arguments. Type Parameters Name Description T Argument's type."
  },
  "api/OmiyaGames.MVC.Controller.ActionMulti-1.html": {
    "href": "api/OmiyaGames.MVC.Controller.ActionMulti-1.html",
    "title": "Delegate Controller.ActionMulti<T> | Model-View-Controller documentation",
    "keywords": "Delegate Controller.ActionMulti<T> A definition for delegates in a Model . Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public delegate void ActionMulti<in T>(object source, params T[] args); Parameters Type Name Description Object source The caller of this event. T[] args Supplied event arguments. Type Parameters Name Description T Arguments' type."
  },
  "api/OmiyaGames.MVC.Controller.Async.html": {
    "href": "api/OmiyaGames.MVC.Controller.Async.html",
    "title": "Delegate Controller.Async | Model-View-Controller documentation",
    "keywords": "Delegate Controller.Async Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public delegate Task Async(object source); Parameters Type Name Description Object source Returns Type Description Task"
  },
  "api/OmiyaGames.MVC.Controller.Async-1.html": {
    "href": "api/OmiyaGames.MVC.Controller.Async-1.html",
    "title": "Delegate Controller.Async<T> | Model-View-Controller documentation",
    "keywords": "Delegate Controller.Async<T> Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public delegate Task<T> Async<T>(object source); Parameters Type Name Description Object source Returns Type Description Task <T> Type Parameters Name Description T"
  },
  "api/OmiyaGames.MVC.Controller.AsyncArgs-1.html": {
    "href": "api/OmiyaGames.MVC.Controller.AsyncArgs-1.html",
    "title": "Delegate Controller.AsyncArgs<T> | Model-View-Controller documentation",
    "keywords": "Delegate Controller.AsyncArgs<T> Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public delegate Task AsyncArgs<in T>(object source, T arg); Parameters Type Name Description Object source T arg Returns Type Description Task Type Parameters Name Description T"
  },
  "api/OmiyaGames.MVC.Controller.AsyncArgs-2.html": {
    "href": "api/OmiyaGames.MVC.Controller.AsyncArgs-2.html",
    "title": "Delegate Controller.AsyncArgs<TArgs, TResult> | Model-View-Controller documentation",
    "keywords": "Delegate Controller.AsyncArgs<TArgs, TResult> Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public delegate Task<TResult> AsyncArgs<in TArgs, TResult>(object source, TArgs arg); Parameters Type Name Description Object source TArgs arg Returns Type Description Task <TResult> Type Parameters Name Description TArgs TResult"
  },
  "api/OmiyaGames.MVC.Controller.AsyncArgsMulti-1.html": {
    "href": "api/OmiyaGames.MVC.Controller.AsyncArgsMulti-1.html",
    "title": "Delegate Controller.AsyncArgsMulti<T> | Model-View-Controller documentation",
    "keywords": "Delegate Controller.AsyncArgsMulti<T> Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public delegate Task AsyncArgsMulti<in T>(object source, params T[] args); Parameters Type Name Description Object source T[] args Returns Type Description Task Type Parameters Name Description T"
  },
  "api/OmiyaGames.MVC.Controller.AsyncArgsMulti-2.html": {
    "href": "api/OmiyaGames.MVC.Controller.AsyncArgsMulti-2.html",
    "title": "Delegate Controller.AsyncArgsMulti<TArgs, TResult> | Model-View-Controller documentation",
    "keywords": "Delegate Controller.AsyncArgsMulti<TArgs, TResult> Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public delegate Task<TResult> AsyncArgsMulti<in TArgs, TResult>(object source, params TArgs[] args); Parameters Type Name Description Object source TArgs[] args Returns Type Description Task <TResult> Type Parameters Name Description TArgs TResult"
  },
  "api/OmiyaGames.MVC.Controller.Coroutine.html": {
    "href": "api/OmiyaGames.MVC.Controller.Coroutine.html",
    "title": "Delegate Controller.Coroutine | Model-View-Controller documentation",
    "keywords": "Delegate Controller.Coroutine A definition for coroutine delegates in a Model . Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public delegate IEnumerator Coroutine(object source); Parameters Type Name Description Object source The caller of this event. Returns Type Description System.Collections.Generic.IEnumerator A coroutine."
  },
  "api/OmiyaGames.MVC.Controller.Coroutine-1.html": {
    "href": "api/OmiyaGames.MVC.Controller.Coroutine-1.html",
    "title": "Delegate Controller.Coroutine<T> | Model-View-Controller documentation",
    "keywords": "Delegate Controller.Coroutine<T> A definition for coroutine delegates in a Model . Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public delegate IEnumerator Coroutine<T>(object source, T arg); Parameters Type Name Description Object source The caller of this event. T arg Supplied event arguments. Returns Type Description System.Collections.Generic.IEnumerator A coroutine. Type Parameters Name Description T Argument's type."
  },
  "api/OmiyaGames.MVC.Controller.CoroutineMulti-1.html": {
    "href": "api/OmiyaGames.MVC.Controller.CoroutineMulti-1.html",
    "title": "Delegate Controller.CoroutineMulti<T> | Model-View-Controller documentation",
    "keywords": "Delegate Controller.CoroutineMulti<T> A definition for coroutine delegates in a Model . Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public delegate IEnumerator CoroutineMulti<T>(object source, params T[] args); Parameters Type Name Description Object source The caller of this event. T[] args Supplied event arguments. Returns Type Description System.Collections.Generic.IEnumerator A coroutine. Type Parameters Name Description T Arguments' type."
  },
  "api/OmiyaGames.MVC.Controller.Event.html": {
    "href": "api/OmiyaGames.MVC.Controller.Event.html",
    "title": "Delegate Controller.Event | Model-View-Controller documentation",
    "keywords": "Delegate Controller.Event A definition for event delegates in a Model . Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public delegate void Event(object source); Parameters Type Name Description Object source The caller of this event."
  },
  "api/OmiyaGames.MVC.Controller.Event-1.html": {
    "href": "api/OmiyaGames.MVC.Controller.Event-1.html",
    "title": "Delegate Controller.Event<T> | Model-View-Controller documentation",
    "keywords": "Delegate Controller.Event<T> A definition for event delegates in a Model . Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public delegate void Event<in T>(object source, T arg) where T : EventArgs; Parameters Type Name Description Object source The caller of this event. T arg Supplied event arguments. Type Parameters Name Description T Argument's type."
  },
  "api/OmiyaGames.MVC.Controller.Func-1.html": {
    "href": "api/OmiyaGames.MVC.Controller.Func-1.html",
    "title": "Delegate Controller.Func<T> | Model-View-Controller documentation",
    "keywords": "Delegate Controller.Func<T> A definition for delegates in a Model . Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public delegate T Func<out T>(object source); Parameters Type Name Description Object source The caller of this event. Returns Type Description T Type Parameters Name Description T"
  },
  "api/OmiyaGames.MVC.Controller.Func-2.html": {
    "href": "api/OmiyaGames.MVC.Controller.Func-2.html",
    "title": "Delegate Controller.Func<TArg, TResult> | Model-View-Controller documentation",
    "keywords": "Delegate Controller.Func<TArg, TResult> A definition for delegates in a Model . Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public delegate TResult Func<in TArg, out TResult>(object source, TArg arg); Parameters Type Name Description Object source The caller of this event. TArg arg Supplied event arguments. Returns Type Description TResult Type Parameters Name Description TArg TResult Return type."
  },
  "api/OmiyaGames.MVC.Controller.FuncMulti-2.html": {
    "href": "api/OmiyaGames.MVC.Controller.FuncMulti-2.html",
    "title": "Delegate Controller.FuncMulti<TArg, TResult> | Model-View-Controller documentation",
    "keywords": "Delegate Controller.FuncMulti<TArg, TResult> A definition for delegates in a Model . Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public delegate TResult FuncMulti<in TArg, out TResult>(object source, params TArg[] args); Parameters Type Name Description Object source The caller of this event. TArg[] args Supplied event arguments. Returns Type Description TResult Type Parameters Name Description TArg TResult Return type."
  },
  "api/OmiyaGames.MVC.Controller.html": {
    "href": "api/OmiyaGames.MVC.Controller.html",
    "title": "Class Controller | Model-View-Controller documentation",
    "keywords": "Class Controller Helper methods for controllers of Model-View-Controller. Inheritance Object Controller Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public static class Controller Remarks The MIT License (MIT) Copyright (c) 2021 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.1.0 Date: 11/28/2021 Author: Taro Omiya Initial verison."
  },
  "api/OmiyaGames.MVC.Editor.html": {
    "href": "api/OmiyaGames.MVC.Editor.html",
    "title": "Namespace OmiyaGames.MVC.Editor | Model-View-Controller documentation",
    "keywords": "Namespace OmiyaGames.MVC.Editor Classes ModelsInspector Creates a window that displays the content of all models generated by ModelFactory"
  },
  "api/OmiyaGames.MVC.Editor.ModelsInspector.html": {
    "href": "api/OmiyaGames.MVC.Editor.ModelsInspector.html",
    "title": "Class ModelsInspector | Model-View-Controller documentation",
    "keywords": "Class ModelsInspector Creates a window that displays the content of all models generated by ModelFactory Inheritance Object ModelsInspector Namespace : OmiyaGames.MVC.Editor Assembly : cs.temp.dll.dll Syntax public class ModelsInspector : EditorWindow Remarks The MIT License (MIT) Copyright (c) 2021 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.0-preview.1 Date: 11/28/2021 Author: Taro Omiya Initial version."
  },
  "api/OmiyaGames.MVC.html": {
    "href": "api/OmiyaGames.MVC.html",
    "title": "Namespace OmiyaGames.MVC | Model-View-Controller documentation",
    "keywords": "Namespace OmiyaGames.MVC Classes Controller Helper methods for controllers of Model-View-Controller. Model A based implementation of IModel , which can be created by ModelFactory . ModelFactory Factory that creates and maintains static instances of IModel s. View Interfaces IModel Interface for models of Model-View-Controller created by ModelFactory . Delegates Controller.Action A definition for delegates in a Model . Controller.Action<T> A definition for delegates in a Model . Controller.ActionMulti<T> A definition for delegates in a Model . Controller.Async Controller.Async<T> Controller.AsyncArgs<T> Controller.AsyncArgs<TArgs, TResult> Controller.AsyncArgsMulti<T> Controller.AsyncArgsMulti<TArgs, TResult> Controller.Coroutine A definition for coroutine delegates in a Model . Controller.Coroutine<T> A definition for coroutine delegates in a Model . Controller.CoroutineMulti<T> A definition for coroutine delegates in a Model . Controller.Event A definition for event delegates in a Model . Controller.Event<T> A definition for event delegates in a Model . Controller.Func<T> A definition for delegates in a Model . Controller.Func<TArg, TResult> A definition for delegates in a Model . Controller.FuncMulti<TArg, TResult> A definition for delegates in a Model ."
  },
  "api/OmiyaGames.MVC.IModel.html": {
    "href": "api/OmiyaGames.MVC.IModel.html",
    "title": "Interface IModel | Model-View-Controller documentation",
    "keywords": "Interface IModel Interface for models of Model-View-Controller created by ModelFactory . Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public interface IModel Remarks The MIT License (MIT) Copyright (c) 2021 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.0-exp Date: 11/28/2021 Author: Taro Omiya Initial verison. Properties Key Key associated with this model. Declaration object Key { get; } Property Value Type Description Object Methods OnCreate(Object, ModelFactory) Called by Create<T>(Object) . Declaration void OnCreate(object key, ModelFactory source) Parameters Type Name Description Object key Key associated with this model. ModelFactory source The factory creating this model."
  },
  "api/OmiyaGames.MVC.Model.html": {
    "href": "api/OmiyaGames.MVC.Model.html",
    "title": "Class Model | Model-View-Controller documentation",
    "keywords": "Class Model A based implementation of IModel , which can be created by ModelFactory . Inheritance Object Model Implements IModel Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public abstract class Model : MonoBehaviour, IModel Remarks The MIT License (MIT) Copyright (c) 2021 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.0-exp Date: 11/28/2021 Author: Taro Omiya Initial verison. Version: 0.2.0-exp.1 Date: 3/2/2022 Author: Taro Omiya Changing key from string to object . Properties Key Key associated with this model. Declaration public object Key { get; } Property Value Type Description Object Methods OnCreate(ModelFactory) Called by Create<T>(Object) . Declaration protected virtual void OnCreate(ModelFactory source) Parameters Type Name Description ModelFactory source The factory creating this model. Remarks If not overridden, this method does nothing. Property Key is already set by the point this method is called. OnCreate(Object, ModelFactory) Called by Create<T>(Object) . Declaration public void OnCreate(object key, ModelFactory source) Parameters Type Name Description Object key Key associated with this model. ModelFactory source The factory creating this model. Implements IModel"
  },
  "api/OmiyaGames.MVC.ModelFactory.html": {
    "href": "api/OmiyaGames.MVC.ModelFactory.html",
    "title": "Class ModelFactory | Model-View-Controller documentation",
    "keywords": "Class ModelFactory Factory that creates and maintains static instances of IModel s. Inheritance Object ModelFactory Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public class ModelFactory : MonoBehaviour Remarks The MIT License (MIT) Copyright (c) 2021 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.0-exp Date: 11/28/2021 Author: Taro Omiya Initial verison. Version: 0.2.0-exp.1 Date: 3/2/2022 Author: Taro Omiya Changing key from string to object . Properties AllModels Gets all the created models. Order is not guaranteed. Declaration public static IEnumerable<IModel> AllModels { get; } Property Value Type Description IEnumerable < IModel > Instance Gets the sole instance of this factory. Declaration public static ModelFactory Instance { get; } Property Value Type Description ModelFactory IsGetLazy Set to true to make Get<T>(Object) lazy-load IModel s. Declaration public bool IsGetLazy { get; set; } Property Value Type Description Boolean Remarks Only works on UNITY_EDITOR builds. NumberOfModels Number of models created so far. Declaration public static int NumberOfModels { get; } Property Value Type Description Int32 Methods Contains(IModel) Checks if the factory has model stored in its dictionary. Declaration public static bool Contains(IModel model) Parameters Type Name Description IModel model The instance to check if factory contains it. Returns Type Description Boolean true if model is found in the factory. Contains<T>(Object) Checks if factory created a model with key. Declaration public static bool Contains<T>(object key = null) Parameters Type Name Description Object key Optional key associated with model. Returns Type Description Boolean true if key is found in the factory. Type Parameters Name Description T The type of IModel . Create<T>(Object) Creates a unique IModel , optionally assoiciated with a key . Declaration public static T Create<T>(object key = null) where T : Component, IModel Parameters Type Name Description Object key To create multiple instances of the same IModel , supply a unique key to be associated with each of them. Returns Type Description T The newly constructed IModel . Type Parameters Name Description T The type of IModel created. See Also IModel Get<T>(Object) Get<T>(Object) Gets an existing IModel , created by Create<T>(Object) . Declaration public static T Get<T>(object key = null) where T : Component, IModel Parameters Type Name Description Object key Optional key associated with an IModel . Returns Type Description T Associated IModel with key . Type Parameters Name Description T The type of IModel to get. See Also IModel Create<T>(Object) Release<T>(Object) Attempts to destroy an IModel , created by Create<T>(Object) . Declaration public static bool Release<T>(object key = null) where T : Component, IModel Parameters Type Name Description Object key Key associated with an IModel . Returns Type Description Boolean true if a created IModel was destroyed. Type Parameters Name Description T The type of IModel to destroy. See Also Create<T>(Object) Reset() Destroys all the created IModel . Declaration public static void Reset() TryGet<T>(out T) Attempts to get an existing IModel , created by . Declaration public static bool TryGet<T>(out T model) where T : Component, IModel Parameters Type Name Description T model An IModel created prior, or null if one isn't found. Returns Type Description Boolean true if a created IModel was found. Type Parameters Name Description T The type of IModel to get. See Also IModel Create<T>(Object) TryGet<T>(Object, out T) Attempts to get an existing IModel , created by Create<T>(Object) . Declaration public static bool TryGet<T>(object key, out T model) where T : Component, IModel Parameters Type Name Description Object key Key associated with an IModel . T model Associated IModel with key , or null if one isn't found. Returns Type Description Boolean true if a created IModel was found. Type Parameters Name Description T The type of IModel to get. See Also IModel Create<T>(Object)"
  },
  "api/OmiyaGames.MVC.View.html": {
    "href": "api/OmiyaGames.MVC.View.html",
    "title": "Class View | Model-View-Controller documentation",
    "keywords": "Class View Inheritance Object View Namespace : OmiyaGames.MVC Assembly : cs.temp.dll.dll Syntax public static class View Methods Bind(Text, ITrackable<String>) Binds a label so that when changes are made to an , the label's text will be updated as well. Declaration public static void Bind(Text labelToUpdate, ITrackable<string> listenTo) Parameters Type Name Description Text labelToUpdate ITrackable < String > listenTo Bind(TextMeshProUGUI, ITrackable<String>) Binds a label so that when changes are made to an , the label's text will be updated as well. Declaration public static void Bind(TextMeshProUGUI labelToUpdate, ITrackable<string> listenTo) Parameters Type Name Description TextMeshProUGUI labelToUpdate ITrackable < String > listenTo Unbind(Text) Removed any bindings to a label. Declaration public static bool Unbind(Text labelToUpdate) Parameters Type Name Description Text labelToUpdate Returns Type Description Boolean Unbind(TextMeshProUGUI) Removed any bindings to a label. Declaration public static bool Unbind(TextMeshProUGUI labelToUpdate) Parameters Type Name Description TextMeshProUGUI labelToUpdate Returns Type Description Boolean"
  },
  "index.html": {
    "href": "index.html",
    "title": "Omiya Games - MVC | Model-View-Controller documentation",
    "keywords": "Omiya Games - MVC The Model-View-Controller (MVC) framework is a common way of organizing code for GUI applications. This package implements a number of helper scripts to help enforce this framework for a Unity project. Currently, this package is in development stages, and may change over time. This MVC implementation runs with the philosophy that Models contains data, delegates, and [ContextMenu] methods for implementing quick cheats. Controllers , meanwhile, creates and sets up models with initial data, and assigning functions to delegates that manipulates the model's data. Finally, Views grabs instances of models to update visuals (e.g. UI) in-game based off of model's data, call the model's delegate, and listen to them like events. With this organization, it's becomes possible to display in-game data in realtime through the use of the Model Inspector: Install Through Unity Package Manager Unity's own Package Manager supports importing packages through a URL to a Git repo : First, on this repository page, click the \"Clone or download\" button, and copy over this repository's HTTPS URL. Then click on the + button on the upper-left-hand corner of the Package Manager, select \"Add package from git URL...\" on the context menu, then paste this repo's URL! While easy and straightforward, this method has a few major downside: it does not support dependency resolution and package upgrading when a new version is released. To add support for that, the following method is recommended: About the Manual Each part of the MVC framework are described in more thorough details in the links below: Model View Controllers Sample Code Here's an example of reading a text input entry from a UI: Model using OmiyaGames.MVC; using UnityEngine; public class CustomModel : Model { // Serialized member variable public string text = \"Testing!\"; // Delegate for the controller to define public Controller.EventBase<string> ChangeText; // Context Menu method, usually for implementing cheats [ContextMenu(\"Log Text\")] public void LogText() { Debug.Log(text); } } View using OmiyaGames.MVC; using UnityEngine; using UnityEngine.UI; public class CustomView : MonoBehaviour { CustomModel model; [SerializeField] TextInput input; void Start() { // Retrieve the CustomModel // Note: if ModelFactory.Create<CustomModel>() hasn't been called yet, // this line *will* throw an exception! model = ModelFactory.Get<CustomModel>(); // Update text input value input.text = model.text; } // Called by the submit button public void OnSubmitClicked() { // Call ChangeText if it's defined model.ChangeText?.Invoke(this, input.text); } } Controller using OmiyaGames.MVC; using UnityEngine; public class CustomController : MonoBehaviour { CustomModel model; [SerializeField] string firstText = \"First!\"; // Using Awake() so model is created before Start() void Awake() { // Create the CustomModel model = ModelFactory.Create<CustomModel>(); // Setup initial data of the model model.text = firstText; model.ChangeText = (source, newText) => model.text = newText; } void OnDestroy() { // (Optional) Destroy the CustomModel ModelFactory.Release<CustomModel>(); model = null; } } Resources Documentation Change Log LICENSE Overall package is licensed under MIT , unless otherwise noted in the 3rd party licenses file and/or source code. Copyright (c) 2021-2022 Omiya Games"
  },
  "manual/changelog.html": {
    "href": "manual/changelog.html",
    "title": "Change Log: | Model-View-Controller documentation",
    "keywords": "Change Log: 0.2.0-exp New Feature : Adding Views , a static class with helper functions to bind a label to a ITrackable<string> in a model. Said label will auto-update if the variable changes. Enhancments : Adding a ton of new helper delegates in Controller . Enhancments : Updating ModelFactory to key off of objects instead of strings . Enhancments : Renaming ModelInspector into ModelsInspector . Adding a lazy load checkbox which always creates a requested model. 0.1.0-exp Initial release: Adding IModel , Model , ModelFactory , and Controller . Adding initial documentation on all."
  },
  "manual/controller.html": {
    "href": "manual/controller.html",
    "title": "Controller | Model-View-Controller documentation",
    "keywords": "Controller Controllers in the Model-View-Controller code pattern are scripts responsible for defining actions that manipulate the data held in models . The view scripts later uses these manipulated data as reference to update its display. In this MVC package, controllers are \"soft\" enforced: no interfaces or abstract classes exists to enforce this part of the pattern. Nonetheless, with the help of ModelFactory , it should be an easy pattern to enforce! Recommended Convention Controllers are typically MonoBehaviour attached to a scene's GameObject with at least void Awake() method defined to create model, and setup a model. Critically, controller's main purpose is to assign methods to the delegates of a model. using OmiyaGames.MVC; using UnityEngine; public class CustomController : MonoBehaviour { CustomModel model; [SerializeField] string firstText = \"First!\"; // Using Awake() so model is created before Start() void Awake() { // Create the CustomModel model = ModelFactory.Create<CustomModel>(); // Setup initial data of the model model.text = firstText; model.ChangeText = (source, newText) => model.text = newText; } void OnDestroy() { // (Optional) Destroy the CustomModel ModelFactory.Release<CustomModel>(); model = null; } } Controllers may also hold serialized references to both in-scene and in-project assets. Typically, this is used to assign the initial variables of a model, but there may be other uses as well where this might be important. public class CustomController : MonoBehaviour { CustomModel model; [SerializeField] Sprite deadIcon; [SerializeField] ParticleSystem explosionPrefab; void Awake() { // Setup initial data of the model model = ModelFactory.Create<CustomModel>(); model.deadIcon = deadIcon; model.explosion = explosionPrefab; } } Helper Delegates The Controller static class contains a few useful delegate templates defined: public static class Controller { public delegate void EventBase(object source); public delegate void EventBase<T>(object source, T arg); public delegate void EventBaseMulti<T>(object source, params T[] args); } These delegates can be used for listening to events. The source is the object calling the function, and arg(s) is the supplied argument (recommended: have arg's type be a class that extends System.EventArgs .) Differences From Views The fact that both controllers and views can change a model's delegates makes the differences between views and controllers rather blurry. While it will be up to the developers of the project to establish their own boundaries on what views and controllers can and can't do, this documenter recommends the following rule: Controllers should apply behavior to delegates that changes the data in the model. Views should not change the model's data, unless through a delegate that a controller has already defined. Views should, instead, apply behavior to delegates that only affects the visuals of the game."
  },
  "manual/model.html": {
    "href": "manual/model.html",
    "title": "Model | Model-View-Controller documentation",
    "keywords": "Model Models in the Model-View-Controller code pattern are scripts responsible for storing and organizing data. Data contained in a model script is later manipulated by the controller scripts, while the view scripts uses it as reference to update its display. In this MVC package, models typically variables, delegates, and occasionally helper methods/properties with the [ContextMenu(\"\")] attribute, which can be used in the Model Inspector window. A number of helper scripts has been created to help enforce this pattern. First, the Model script is an abstract class one can extend to create a custom model. The ModelFactory.Create<IModel>() can be used to create a new model, while ModelFactory.Get<IModel>() retrieves an existing one. Finally, a helper window, Model Inspector , can be opened to observe while the game is playing what models have been created, what data they contain, and even edit them. Model Abstract Class Model is a base class intended to be extended so that ModelFactory can create this instance. As mentioned prior, the programmer is expected to create a concrete class with serialized/public variables, delegates, and occasionally helper methods/properties with the [ContextMenu(\"\")] attribute. Note that Model already has a read-only property called Key , which returns an optional string the model's instance is associated with in the ModelFactory 's dictionary. Below is an example of how one would write a custom model: using OmiyaGames.MVC; using UnityEngine; public class CustomModel : Model { // Serialized member variable public string text = \"Testing!\"; // Delegate for the controller to define public Controller.EventBase<string> ChangeText; // Context Menu method, usually for implementing cheats [ContextMenu(\"Log Text\")] public void LogText() { Debug.Log(text); } } Despite being a MonoBehaviour , common Unity functions like Start() and Update() will not be called in a Model , as the GameObject it's attached to, ModelFactory , is not activated. To mitigate this, there is a virtual method, OnCreate(ModelFactory) , one can override to initialize any member variables as soon as ModelFactory.Create<Model>() is called. public class CustomModel : Model { public string text; protected override void OnCreate(ModelFactory source) { text = \"Testing!\"; } } IModel Interface For added flexibility, ModelFactory.Get<Model>() can also create any components implementing the IModel interface. When defining a custom model this way, note that the first argument of method void OnCreate(string, ModelFactory) , which the interface requires the script to define, should be stored and returned by the other mandatory getter property, string Key . As a demonstration: public class CustomModel : Rigidbody, IModel { // Store the key from OnCreate! string key; /// <inheritdoc/> public void OnCreate(string key, ModelFactory source) { this.key = key; } /// <inheritdoc/> public string Key => key; } ModelFactory ModelFactory is a singleton script that automatically generates a deactivated GameObject hidden from the Hierarchy window. It's recommended that a controller script is used to attach a model to this singleton GameObject via ModelFactory.Create<CustomModel>() . A typical controller might look as follows: using OmiyaGames.MVC; using UnityEngine; public class CustomController : MonoBehaviour { CustomModel model; [SerializeField] string firstText = \"First!\"; // Using Awake() so model is created before Start() void Awake() { // Create the CustomModel model = ModelFactory.Create<CustomModel>(); // Setup initial data of the model model.text = firstText; model.ChangeText = (source, newText) => model.text = newText; } void OnDestroy() { // (Optional) Destroy the CustomModel ModelFactory.Release<CustomModel>(); model = null; } } This can later be retrieved by a view script using ModelFactory.Get<CustomModel>() or ModelFactory.TryGet<CustomModel>(out CustomModel) : using OmiyaGames.MVC; using UnityEngine; using UnityEngine.UI; public class CustomView : MonoBehaviour { CustomModel model; [SerializeField] TextInput input; void Start() { // Retrieve the CustomModel // Note: if ModelFactory.Create<CustomModel>() hasn't been called yet, // this line *will* throw an exception! model = ModelFactory.Get<CustomModel>(); // Update text input value input.text = model.text; } // Called by the submit button public void OnSubmitClicked() { // Let the controller define the behavior of this submit button if(model != null) { model.ChangeText?.Invoke(this, input.text); } } } Creating Mulitple Instances of the Same Model Note that by default ModelFactory.Create<CustomModel>() does not let you create more than one instance of CustomModel . To create multiple instances of the same model, a unique key argument must be provided to ModelFactory.Create<CustomModel>(string) : public class CustomController : MonoBehaviour { CustomModel[] models; [SerializeField] int numModels = 10; // Using Awake() so model is created before Start() void Awake() { // Create CustomModels models = new CustomModel[numModels]; for(int i = 0; i < numModels; ++i) { models[i] = ModelFactory.Create<CustomModel>(i.ToString()); models[i].ChangeText = (source, newText) => models[i].text = newText; } } void OnDestroy() { // (Optional) Destroy all CustomModels for(int i = 0; i < numModels; ++i) { ModelFactory.Release<CustomModel>(i.ToString()); } models = null; } } To retrieve a specific instance, of course, the same key needs to be provided for ModelFactory.Get<CustomModel>(string) : public class CustomView : MonoBehaviour { CustomModel model; [SerializeField] int modelIndex = 0; [SerializeField] TextInput input; void Start() { // Retrieve the CustomModel model = ModelFactory.Get<CustomModel>(modelIndex.ToString()); // Update text input value input.text = model.text; } // Called by the submit button public void OnSubmitClicked() { // Let the controller define the behavior of this submit button if(model != null) { model.ChangeText?.Invoke(this, input.text); } } } Model Inspector With this package a new window can be used to observe the runtime model data. One can simply access this by clicking on \"Window -> Omiya Games -> Model Inspector.\" The Model Inspector displays a list of models, exactly like how Unity's own Inspector window reveals the Components attached to a GameObject. And just like the built-in Inspector, Model Inspector also let's the user edit any data in the model in realtime! As an added bonus, one can even run methods with the [ContextMenu(string)] attribute. Great for debugging and triggering cheats!"
  },
  "manual/view.html": {
    "href": "manual/view.html",
    "title": "Views | Model-View-Controller documentation",
    "keywords": "Views Views in the Model-View-Controller code pattern are scripts responsible for rendering the data in models in a visually-pleasing manner. Furthermore, views also calls functions defined in controller to whenever a user interacts with the visuals views render. In this MVC package, views are \"soft\" enforced: no interfaces or abstract classes exists to enforce this part of the pattern. Nonetheless, with the help of ModelFactory , it should be an easy pattern to enforce! Recommended Convention Views are typically MonoBehaviour attached to a scene's GameObject with at least void Start() method to grab an existing model. Naturally, the data of this model is read to setup the visuals view scripts are responsible for. Whenever an event, such as a button click or collision, occurs, views are responsible for calling delegate methods stored in the model. Obviously, since views needs to manipulate Unity components, they almost always have at least one serialized reference to a scene object: using OmiyaGames.MVC; using UnityEngine; using UnityEngine.UI; public class CustomView : MonoBehaviour { CustomModel model; [SerializeField] TextInput input; void Start() { // Retrieve the CustomModel // Note: if ModelFactory.Create<CustomModel>() hasn't been called yet, // this line *will* throw an exception! model = ModelFactory.Get<CustomModel>(); // Update text input value input.text = model.text; } // Called by the submit button public void OnSubmitClicked() { // Let the controller define the behavior of this submit button if(model != null) { model.ChangeText?.Invoke(this, input.text); } } } Views may also listen to a model's delegate (like events,) and update visual changes when said delegate gets called: public class CustomView : MonoBehaviour { CustomModel model; [SerializeField] Text loadingPercent; void Start() { // Retrieve the CustomModel model = ModelFactory.Get<CustomModel>(); model.OnLoading += UpdateLabel; // Update label loadingPercent.text = \"0%\"; } void OnDestroy() { // IMPORTANT: stop listening to the OnLoading event if(model != null) { model.OnLoading -= UpdateLabel; } } void UpdateLabel() { loadingPercent.text = model.loaded.ToString(\"0%\"); } } Differences From Controllers The fact that both views and controllers can change a model's delegates makes the differences between views and controllers rather blurry. While it will be up to the developers of the project to establish their own boundaries on what views and controllers can and can't do, this documenter recommends the following rule: Controllers should apply behavior to delegates that changes the data in the model. Views should not change the model's data, unless through a delegate that a controller has already defined. Views should, instead, apply behavior to delegates that only affects the visuals of the game."
  }
}